/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.SystemAdminWorkArea;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class ManageUserAccountJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageUserAccountJPanel
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private EcoSystem system;

    public ManageUserAccountJPanel(JPanel container, EcoSystem system) {
        initComponents();
        this.system = system;
        this.userProcessContainer = container;

        populateEnterpriseJComboBox(system);
        //populateComboBox();
        // employeeJComboBox.removeAllItems();
        popData();
    }

    private void populateComboBox() {
        enterpriseJComboBox.removeAllItems();
        organizationJComboBox.removeAllItems();
        roleJComboBox.removeAllItems();
        //Enterprise
        for (Enterprise.EnterpriseType type : Enterprise.EnterpriseType.values()) {
            enterpriseJComboBox.addItem(type);
        }
        //Organization
        for (Organization.Type type : Organization.Type.values()) {
            organizationJComboBox.addItem(type);
        }
        //Role
        for (Role.RoleType type : Role.RoleType.values()) {
            roleJComboBox.addItem(type);
        }
    }
    
    public void populateEnterpriseJComboBox(EcoSystem system) {
        enterpriseJComboBox.removeAllItems();
        for (Network network : system.getNetworkList()) {
            for(Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()){
                enterpriseJComboBox.addItem(e);               
            }
        }
    }
    
    public void populateOrganizationJComboBox(Enterprise enterprise) {
        organizationJComboBox.removeAllItems();
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            organizationJComboBox.addItem(organization);
        }
    }
    
    public void populateEmployeeJComboBox(Organization organization){
        enterpriseJComboBox.removeAllItems();
        
        for (Employee employee : organization.getEmployeeDirectory().getEmployeeList()){
            enterpriseJComboBox.addItem(employee);
        }
    }
    
    private void populateRoleJComboBox(Organization organization){
        roleJComboBox.removeAllItems();
        for (Role role : organization.getSupportedRole()){
            roleJComboBox.addItem(role);
        }
    }

    public void popData() {

        DefaultTableModel model = (DefaultTableModel) userJTable.getModel();

        model.setRowCount(0);

        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for(Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                    for(UserAccount userAccount: organization.getUserAccountDirectory().getUserAccountList()){
                       Object[] row = new Object[6];
                       row[0] = enterprise.getName();
                       row[1] = organization.getName();
                       row[2] = userAccount.getEmployee().getName();
                       row[3] = userAccount.getRole();
                       row[4] = userAccount.getUsername();
                       row[5] = userAccount.getPassword();
                       model.addRow(row);                         
                    }
                  
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createUserJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userJTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        enterpriseJComboBox = new javax.swing.JComboBox();
        backjButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        organizationJComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        roleJComboBox = new javax.swing.JComboBox();
        btnRefresh2 = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        txtName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();

        createUserJButton.setText("Create User");
        createUserJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserJButtonActionPerformed(evt);
            }
        });

        userJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Enterprise", "Organization", "Name", "Role", "Username", "Password"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(userJTable);
        if (userJTable.getColumnModel().getColumnCount() > 0) {
            userJTable.getColumnModel().getColumn(0).setResizable(false);
            userJTable.getColumnModel().getColumn(1).setResizable(false);
            userJTable.getColumnModel().getColumn(2).setResizable(false);
            userJTable.getColumnModel().getColumn(3).setResizable(false);
            userJTable.getColumnModel().getColumn(4).setResizable(false);
            userJTable.getColumnModel().getColumn(5).setResizable(false);
        }

        jLabel3.setText("Enterprise");

        enterpriseJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        enterpriseJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterpriseJComboBoxActionPerformed(evt);
            }
        });

        backjButton1.setFont(new java.awt.Font("ROG Fonts", 0, 12)); // NOI18N
        backjButton1.setText("<< Back");
        backjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Organization");

        organizationJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        organizationJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organizationJComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setText("Role");

        roleJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        roleJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleJComboBoxActionPerformed(evt);
            }
        });

        btnRefresh2.setText("Refresh Table");
        btnRefresh2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefresh2ActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnView.setText("View Details");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        jLabel6.setText("Name");

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel6))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(roleJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtName)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(enterpriseJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(organizationJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnView)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(createUserJButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRefresh2))))
                    .addComponent(backjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 935, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel3, jLabel4, jLabel5});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(enterpriseJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(organizationJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(roleJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(btnRefresh2)
                    .addComponent(btnView)
                    .addComponent(createUserJButton)
                    .addComponent(btnDelete))
                .addContainerGap(133, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createUserJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserJButtonActionPerformed
        CreateUserJPanel CreateUserJPanel = new CreateUserJPanel(userProcessContainer, system);
        userProcessContainer.add("CreateUserJPanel", CreateUserJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_createUserJButtonActionPerformed

    private void backjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backjButton1ActionPerformed

    private void organizationJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organizationJComboBoxActionPerformed
        
        Organization o = (Organization)organizationJComboBox.getSelectedItem();
        if (o != null){
            populateRoleJComboBox(o);
        }
        
    }//GEN-LAST:event_organizationJComboBoxActionPerformed

    private void enterpriseJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterpriseJComboBoxActionPerformed
        
        Enterprise e = (Enterprise)enterpriseJComboBox.getSelectedItem();
        if (e != null){
            populateOrganizationJComboBox(e);
        }
    }//GEN-LAST:event_enterpriseJComboBoxActionPerformed

    private void btnRefresh2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefresh2ActionPerformed
        // TODO add your handling code here:
        popData();
    }//GEN-LAST:event_btnRefresh2ActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        if(txtName.getText().isBlank()){
            JOptionPane.showMessageDialog(null, "Name cannot be blank.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String name = txtName.getText().trim().toLowerCase(); 
        String enterpriseName;
        String organizationName;
        Enterprise selectedEnterprise = (Enterprise)(enterpriseJComboBox.getSelectedItem()); 
        try{
            enterpriseName = selectedEnterprise.getName();
        }catch(Exception e){
            enterpriseName = "";
        }
        Organization selectedOrganization = (Organization) organizationJComboBox.getSelectedItem();
        try{
            organizationName = selectedOrganization.getName();
        }catch(Exception e){
            organizationName = "";
        }

        // flex search, selecting Enterprise would give better result (but not required!)

        DefaultTableModel model = (DefaultTableModel) userJTable.getModel();
        //System.out.println("TESTING INFO: \nENTERPRISENAME: " + enterpriseName + "\nORGANIZATIONNAME: " + organizationName);
        model.setRowCount(0); // 清空表格数据
        for(Network network : system.getNetworkList()){
            for (Enterprise te : network.getEnterpriseDirectory().getEnterpriseList()) {
                if(te.getName().toLowerCase().contains(enterpriseName.toLowerCase().trim())){
                    //System.out.println("ENTERPRISE FOUND" + te.getName().toLowerCase().trim());
                    for(Organization organization : te.getOrganizationDirectory().getOrganizationList()){
                        if(organization.getName().toLowerCase().contains(organizationName.toLowerCase().trim())){
                            //System.out.println("ORGANIZATION FOUND" + organization.getName());
                            for(UserAccount userAccount : organization.getUserAccountDirectory().getUserAccountList()){
                                if (userAccount.getUsername().trim().toLowerCase().contains(name.toLowerCase().trim())||
                                    userAccount.getEmployee().getName().trim().toLowerCase().contains(name.toLowerCase().trim())) {
                                    Object[] row = new Object[6];
                                    row[0] = te.getName();
                                    row[1] = organization.getName();
                                    row[2] = userAccount.getEmployee().getName();
                                    row[3] = userAccount.getRole().toString();
                                    row[4] = userAccount.getUsername();
                                    row[5] = userAccount.getPassword();
                                    model.addRow(row);
                               }                         
                            }                            
                        }
                    }                    
                }
            }            
        }

        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No user found", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRow = userJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to view details.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String enterpriseName = (String)userJTable.getValueAt(selectedRow, 0);
        String organizationName = (String)userJTable.getValueAt(selectedRow, 1);
        //String name = (String)userJTable.getValueAt(selectedRow, 2);
        String userName = (String)userJTable.getValueAt(selectedRow, 4);
        UserAccount userAccount = null;
        System.out.println("PEEK INFO:" + enterpriseName + ", " + organizationName + ", " + userName);
        
        for(Network n:system.getNetworkList()){
            for(Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()){
                for(Organization o : e.getOrganizationDirectory().getOrganizationList()){
                    for(UserAccount ua : o.getUserAccountDirectory().getUserAccountList()){
                        if(ua.getUsername().replace(" ", "").toLowerCase().contains(userName.toLowerCase())){
                            userAccount = ua;
                            System.out.println("ua information: ");
                            System.out.println("Username: "+ua.getUsername() + ", password: "+ ua.getPassword()+ ", name: " +ua.getEmployee().getName()+ ", " +ua.getRole().toString() + ", ");
                        }
                    }
                }
            }
        }
        
        if(userAccount == null){
            System.out.println("SELECTED USER NOT FOUND, USERACCOUNT == NULL, ERROR!");
            return;
        }

        UserDetailsJPanel userDetailsJPanel = new UserDetailsJPanel(userProcessContainer, userAccount, enterpriseName, organizationName);
        userProcessContainer.add("UserDetailsJPanel", userDetailsJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);            

    }//GEN-LAST:event_btnViewActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void roleJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roleJComboBoxActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = userJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to view details.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String enterpriseName = (String)userJTable.getValueAt(selectedRow, 0);
        String organizationName = (String)userJTable.getValueAt(selectedRow, 1);
        String userName = (String)userJTable.getValueAt(selectedRow, 4);
        System.out.println("DELETE INFO:" + enterpriseName + ", " + organizationName + ", " + userName);
        
        for(Network n:system.getNetworkList()){
            for(Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()){
                for(Organization o : e.getOrganizationDirectory().getOrganizationList()){
                    for(UserAccount ua : o.getUserAccountDirectory().getUserAccountList()){
                        if(ua.getUsername().replace(" ", "").toLowerCase().contains(userName.toLowerCase())){
                            System.out.println("ua information: ");
                            System.out.println("Username: "+ua.getUsername() + ", password: "+ ua.getPassword()+ ", name: " +ua.getEmployee().getName()+ ", " +ua.getRole().toString() + ", ");
                            o.getEmployeeDirectory().getEmployeeList().remove(ua.getEmployee());
                            o.getUserAccountDirectory().getUserAccountList().remove(ua);
                            return;
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backjButton1;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRefresh2;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnView;
    private javax.swing.JButton createUserJButton;
    private javax.swing.JComboBox enterpriseJComboBox;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox organizationJComboBox;
    private javax.swing.JComboBox roleJComboBox;
    private javax.swing.JTextField txtName;
    private javax.swing.JTable userJTable;
    // End of variables declaration//GEN-END:variables
}
